name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: Determine version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Get commit messages since last tag
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")

          # Parse version
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Determine bump type based on conventional commits
          if echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.*\))?!:|^BREAKING CHANGE:"; then
            # Breaking change -> major bump
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMITS" | grep -qiE "^(feat|feature)(\(.*\))?:"; then
            # New feature -> minor bump
            MINOR=$((MINOR + 1))
            PATCH=0
          elif echo "$COMMITS" | grep -qiE "^(fix|bugfix|perf|refactor)(\(.*\))?:"; then
            # Fix/improvement -> patch bump
            PATCH=$((PATCH + 1))
          else
            # No conventional commit found -> patch bump
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [ "${{ steps.version.outputs.version }}" == "$LATEST_TAG" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Build binaries
        if: steps.check.outputs.changed == 'true'
        run: |
          VERSION=${{ steps.version.outputs.version_number }}

          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.version=$VERSION" -o irc-client-linux-amd64

          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X main.version=$VERSION" -o irc-client-linux-arm64

          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w -X main.version=$VERSION" -o irc-client-macos-amd64

          # macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w -X main.version=$VERSION" -o irc-client-macos-arm64

          # Create checksums
          sha256sum irc-client-* > checksums.txt

      - name: Generate release notes
        if: steps.check.outputs.changed == 'true'
        id: notes
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi

          cat > release_notes.md << EOF
          ## Changes

          $COMMITS

          ## Installation

          Download the appropriate binary for your platform:

          - **Linux AMD64**: \`irc-client-linux-amd64\`
          - **Linux ARM64**: \`irc-client-linux-arm64\`
          - **macOS AMD64**: \`irc-client-macos-amd64\`
          - **macOS ARM64**: \`irc-client-macos-arm64\`

          Make it executable:
          \`\`\`sh
          chmod +x irc-client-*
          \`\`\`

          Run:
          \`\`\`sh
          ./irc-client-* irc.libera.chat/6697 yournickname
          \`\`\`
          EOF

          echo "Release notes generated"

      - name: Create Release
        if: steps.check.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            irc-client-linux-amd64
            irc-client-linux-arm64
            irc-client-macos-amd64
            irc-client-macos-arm64
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
